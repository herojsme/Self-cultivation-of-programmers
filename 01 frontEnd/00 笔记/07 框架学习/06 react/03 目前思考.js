// React 类组件和函数组件之间的区别是什么？
//   一、语法不同、设计思想不同
//      函数式组件是函数式编程思想，而类组件是面向对象编程思想。面向对象编程将属性和方法封装起来，屏蔽很多细节，不利于测试。
//   二、生命周期、状态变量
//      类式组件：使用state对象定义状态变量，有诸如componmentDidMount、shouldComponentUpdate等生命周期钩子函数；
//      函数式组件：没有this,使用一系列的内置hooks实现对应的功能，比如使用useState创建状态变量，使用useEffect实现类似于componmentDidMount、shouldComponentUpdate等生命周期钩子函数的功能。
//   三、复用性
//      类式组件：使用hoc（高阶组件）、render propss实现组件的逻辑复用、拓展组件的功能。
//      函数式组件：使用自定义hooks实现组件的逻辑复用。
//   四、优缺点
//   # 函数式组件 优点：
//        相对于类式组件，一般情况而言，代码量更少，代码更简洁，可读性更强；
//        更易于拆分组件和测试；
//     缺点：
//        在业务逻辑巨复杂，状态依赖关系错乱的情况下，使用useEffect、useMemo等hooks，对其依赖项数组的思考为开发者带来了更大的心智负担；
//        不具备处理错误边界等业务情况的hooks；
//   类式组件优点： 功能完备，具有componentDidsCatch、getDerivedStateFromError等钩子函数处理边界错误；
//    缺点：在复用性上，hoc组件等会出现诸如嵌套地狱、重名props被覆盖、难以拆分和测试等问题；
//   五、总结
//        如果你开发的业务逻辑和状态并不复杂，那么函数式组件可能会更合适；
//        但是如果你要处理错误边界或者是业务逻辑巨复杂的情况，那么类式组件更合适；

// 可以做组件自己的redux;
// 或者useReducer

// 通用组件可以用继承
// 逻辑与业务分离  视图view只负责展示  业务逻辑单独另一层
// 任务流  管道,洋葱
// 依赖注入
// 观察者模式 事件订阅
// 状态模式
